/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rpcs.proto */

#ifndef PROTOBUF_C_rpcs_2eproto__INCLUDED
#define PROTOBUF_C_rpcs_2eproto__INCLUDED

#include "aos/rpc/protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _InitSendNumberRequest InitSendNumberRequest;
typedef struct _InitSendStringRequest InitSendStringRequest;
typedef struct _InitSerialPutStringRequest InitSerialPutStringRequest;
typedef struct _InitSerialPutcharRequest InitSerialPutcharRequest;
typedef struct _InitSerialGetcharResponse InitSerialGetcharResponse;
typedef struct _InitProcessSpawnRequest InitProcessSpawnRequest;
typedef struct _InitProcessSpawnResponse InitProcessSpawnResponse;
typedef struct _InitProcessGetNameRequest InitProcessGetNameRequest;
typedef struct _InitProcessGetNameResponse InitProcessGetNameResponse;
typedef struct _InitProcessGetAllPidsRequest InitProcessGetAllPidsRequest;
typedef struct _InitProcessGetAllPidsResponse InitProcessGetAllPidsResponse;
typedef struct _InitProcessInformDeathRequest InitProcessInformDeathRequest;
typedef struct _RouteRequest RouteRequest;
typedef struct _RouteResponse RouteResponse;
typedef struct _MemGetRamCapRequest MemGetRamCapRequest;
typedef struct _MemGetRamCapResponse MemGetRamCapResponse;
typedef struct _ServiceConnectRequest ServiceConnectRequest;
typedef struct _ServiceBytesRequest ServiceBytesRequest;
typedef struct _ServiceBytesResponse ServiceBytesResponse;
typedef struct _TestIncrementRequest TestIncrementRequest;
typedef struct _TestIncrementResponse TestIncrementResponse;
typedef struct _TestCapIncrementRequest TestCapIncrementRequest;
typedef struct _TestCapIncrementResponse TestCapIncrementResponse;
typedef struct _ServiceInfo ServiceInfo;
typedef struct _NsLookupRequest NsLookupRequest;
typedef struct _NsLookupResponse NsLookupResponse;
typedef struct _NsRegisterRequest NsRegisterRequest;
typedef struct _NsEnumerateRequest NsEnumerateRequest;
typedef struct _NsDeregisterRequest NsDeregisterRequest;
typedef struct _NsEnumerateResponse NsEnumerateResponse;
typedef struct _CreateUdpEndpointRequest CreateUdpEndpointRequest;
typedef struct _CreateTcpConnectionRequest CreateTcpConnectionRequest;
typedef struct _ArpRequest ArpRequest;
typedef struct _ArpTableResponse ArpTableResponse;
typedef struct _CreateTcpServerRequest CreateTcpServerRequest;
typedef struct _ConnectTcpClientRequest ConnectTcpClientRequest;
typedef struct _FSOpenRequest FSOpenRequest;
typedef struct _FSOpenResponse FSOpenResponse;
typedef struct _FSCreateRequest FSCreateRequest;
typedef struct _FSCreateResponse FSCreateResponse;
typedef struct _FSDeleteRequest FSDeleteRequest;
typedef struct _FSCloseRequest FSCloseRequest;
typedef struct _FSReadRequest FSReadRequest;
typedef struct _FSReadResponse FSReadResponse;
typedef struct _FSReadFileToFrameRequest FSReadFileToFrameRequest;
typedef struct _FSReadFileToFrameResponse FSReadFileToFrameResponse;
typedef struct _FSWriteRequest FSWriteRequest;
typedef struct _FSWriteResponse FSWriteResponse;
typedef struct _FSTruncRequest FSTruncRequest;
typedef struct _FSReadNextDirRequest FSReadNextDirRequest;
typedef struct _FSReadNextDirResponse FSReadNextDirResponse;
typedef struct _TermAcquireLockRequest TermAcquireLockRequest;
typedef struct _TermAcquireLockResponse TermAcquireLockResponse;
typedef struct _TermReleaseLockRequest TermReleaseLockRequest;
typedef struct _TermRegisterClientRequest TermRegisterClientRequest;
typedef struct _TermRegisterClientResponse TermRegisterClientResponse;
typedef struct _TermWriteStringRequest TermWriteStringRequest;
typedef struct _TermWriteStringResponse TermWriteStringResponse;
typedef struct _TermReadStringRequest TermReadStringRequest;
typedef struct _TermReadStringResponse TermReadStringResponse;
typedef struct _TermWriteCharRequest TermWriteCharRequest;
typedef struct _TermWriteCharResponse TermWriteCharResponse;
typedef struct _TermReadCharRequest TermReadCharRequest;
typedef struct _TermReadCharRespnose TermReadCharRespnose;
typedef struct _TermDebugRequest TermDebugRequest;
typedef struct _RpcRequestWrap RpcRequestWrap;
typedef struct _RpcResponseWrap RpcResponseWrap;
typedef struct _RpcMessage RpcMessage;


/* --- enums --- */

typedef enum _ServiceConnectRequest__Type {
  SERVICE_CONNECT_REQUEST__TYPE__UMP = 0,
  SERVICE_CONNECT_REQUEST__TYPE__LMP = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SERVICE_CONNECT_REQUEST__TYPE)
} ServiceConnectRequest__Type;
typedef enum _RpcMethod {
  RPC_METHOD__INIT_SEND_NUMBER = 0,
  RPC_METHOD__INIT_SEND_STRING = 1,
  RPC_METHOD__INIT_ESTABLISH_DOMAIN_SERVER = 10,
  RPC_METHOD__INIT_NAMESERVER_STARTED = 17,
  RPC_METHOD__INIT_SERIAL_PUT_STRING = 3,
  RPC_METHOD__INIT_SERIAL_GETCHAR = 2,
  RPC_METHOD__INIT_SERIAL_PUTCHAR = 4,
  RPC_METHOD__INIT_PROCESS_GET_ALL_PIDS = 5,
  RPC_METHOD__INIT_PROCESS_GET_NAME = 6,
  RPC_METHOD__INIT_PROCESS_SPAWN = 7,
  RPC_METHOD__INIT_PROCESS_INFORM_DEATH = 44,
  RPC_METHOD__MEM_GET_RAM_CAP = 8,
  RPC_METHOD__SERVICE_CONNECT = 11,
  RPC_METHOD__SERVICE_BYTES = 18,
  RPC_METHOD__ROUTE = 12,
  /*
   * SERVICES
   */
  RPC_METHOD__TEST_INCREMENT = 13,
  RPC_METHOD__TEST_CAP_INCREMENT = 14,
  RPC_METHOD__NS_LOOKUP = 15,
  RPC_METHOD__NS_REGISTER = 16,
  RPC_METHOD__NS_ENUMERATE = 24,
  RPC_METHOD__NS_DEREGISTER = 25,
  RPC_METHOD__CREATE_UDP_ENDPOINT = 19,
  RPC_METHOD__CREATE_TCP_CONNECTION = 20,
  RPC_METHOD__ARP_REQUEST = 21,
  RPC_METHOD__GET_ARP_TABLE_REQUEST = 49,
  RPC_METHOD__CREATE_TCP_SERVER = 22,
  RPC_METHOD__CONNECT_TCP_CLIENT = 23,
  /*
   * Filesystem
   */
  RPC_METHOD__FS_OPEN = 26,
  RPC_METHOD__FS_CREATE = 27,
  RPC_METHOD__FS_CLOSE = 28,
  RPC_METHOD__FS_READ = 29,
  RPC_METHOD__FS_WRITE = 30,
  RPC_METHOD__FS_TRUNC = 38,
  RPC_METHOD__FS_OPENDIR = 39,
  RPC_METHOD__FS_READNEXTDIR = 40,
  RPC_METHOD__FS_DELETE = 41,
  RPC_METHOD__FS_READFILE_TO_FRAME = 47,
  /*
   * DO NOT CHANGE: Setting up LMP channels depends on this value being 9.
   */
  RPC_METHOD__SEND_LOCAL_LMP_EP = 9,
  RPC_METHOD__TERM_ACQUIRE_LOCK = 31,
  RPC_METHOD__TERM_RELEASE_LOCK = 32,
  RPC_METHOD__TERM_REGISTER_CLIENT = 33,
  RPC_METHOD__TERM_WRITE_STRING = 34,
  RPC_METHOD__TERM_READ_STRING = 35,
  RPC_METHOD__TERM_WRITE_CHAR = 36,
  RPC_METHOD__TERM_READ_CHAR = 37,
  RPC_METHOD__TERM_SWITCH_TO_UMP = 42,
  RPC_METHOD__TERM_DEBUG = 43
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC_METHOD)
} RpcMethod;

/* --- messages --- */

/*
 * INIT
 */
struct  _InitSendNumberRequest
{
  ProtobufCMessage base;
  uint64_t number;
};
#define INIT_SEND_NUMBER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_send_number_request__descriptor) \
    , 0 }


struct  _InitSendStringRequest
{
  ProtobufCMessage base;
  char *str;
};
#define INIT_SEND_STRING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_send_string_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * SERIAL
 */
struct  _InitSerialPutStringRequest
{
  ProtobufCMessage base;
  char *str;
};
#define INIT_SERIAL_PUT_STRING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_serial_put_string_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _InitSerialPutcharRequest
{
  ProtobufCMessage base;
  uint32_t value;
};
#define INIT_SERIAL_PUTCHAR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_serial_putchar_request__descriptor) \
    , 0 }


struct  _InitSerialGetcharResponse
{
  ProtobufCMessage base;
  uint32_t value;
};
#define INIT_SERIAL_GETCHAR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_serial_getchar_response__descriptor) \
    , 0 }


/*
 * PROCESS
 */
struct  _InitProcessSpawnRequest
{
  ProtobufCMessage base;
  uint32_t core;
  char *cmdline;
};
#define INIT_PROCESS_SPAWN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_spawn_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _InitProcessSpawnResponse
{
  ProtobufCMessage base;
  uint32_t pid;
};
#define INIT_PROCESS_SPAWN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_spawn_response__descriptor) \
    , 0 }


struct  _InitProcessGetNameRequest
{
  ProtobufCMessage base;
  uint32_t pid;
};
#define INIT_PROCESS_GET_NAME_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_get_name_request__descriptor) \
    , 0 }


struct  _InitProcessGetNameResponse
{
  ProtobufCMessage base;
  char *name;
};
#define INIT_PROCESS_GET_NAME_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_get_name_response__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _InitProcessGetAllPidsRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean should_query;
};
#define INIT_PROCESS_GET_ALL_PIDS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_get_all_pids_request__descriptor) \
    , 0 }


struct  _InitProcessGetAllPidsResponse
{
  ProtobufCMessage base;
  size_t n_pids;
  uint32_t *pids;
};
#define INIT_PROCESS_GET_ALL_PIDS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_get_all_pids_response__descriptor) \
    , 0,NULL }


struct  _InitProcessInformDeathRequest
{
  ProtobufCMessage base;
  uint32_t pid;
};
#define INIT_PROCESS_INFORM_DEATH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_process_inform_death_request__descriptor) \
    , 0 }


struct  _RouteRequest
{
  ProtobufCMessage base;
  uint64_t destination_sid;
  RpcMethod method;
  RpcRequestWrap *inner_request;
};
#define ROUTE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&route_request__descriptor) \
    , 0, RPC_METHOD__INIT_SEND_NUMBER, NULL }


struct  _RouteResponse
{
  ProtobufCMessage base;
  RpcMethod method;
  RpcResponseWrap *inner_response;
};
#define ROUTE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&route_response__descriptor) \
    , RPC_METHOD__INIT_SEND_NUMBER, NULL }


/*
 * MEMORY
 */
struct  _MemGetRamCapRequest
{
  ProtobufCMessage base;
  uint64_t bytes;
  uint64_t alignment;
};
#define MEM_GET_RAM_CAP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem_get_ram_cap_request__descriptor) \
    , 0, 0 }


struct  _MemGetRamCapResponse
{
  ProtobufCMessage base;
  uint64_t allocated_bytes;
};
#define MEM_GET_RAM_CAP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mem_get_ram_cap_response__descriptor) \
    , 0 }


/*
 * SERVICE handling
 */
struct  _ServiceConnectRequest
{
  ProtobufCMessage base;
  ServiceConnectRequest__Type type;
};
#define SERVICE_CONNECT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&service_connect_request__descriptor) \
    , SERVICE_CONNECT_REQUEST__TYPE__UMP }


struct  _ServiceBytesRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData raw_bytes;
};
#define SERVICE_BYTES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&service_bytes_request__descriptor) \
    , {0,NULL} }


struct  _ServiceBytesResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData raw_bytes;
};
#define SERVICE_BYTES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&service_bytes_response__descriptor) \
    , {0,NULL} }


/*
 * ---------- SERVICES ----------
 * Test
 */
struct  _TestIncrementRequest
{
  ProtobufCMessage base;
  uint64_t number;
};
#define TEST_INCREMENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_increment_request__descriptor) \
    , 0 }


struct  _TestIncrementResponse
{
  ProtobufCMessage base;
  uint64_t number;
};
#define TEST_INCREMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_increment_response__descriptor) \
    , 0 }


struct  _TestCapIncrementRequest
{
  ProtobufCMessage base;
  uint64_t number;
};
#define TEST_CAP_INCREMENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_cap_increment_request__descriptor) \
    , 0 }


struct  _TestCapIncrementResponse
{
  ProtobufCMessage base;
  uint64_t number;
};
#define TEST_CAP_INCREMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_cap_increment_response__descriptor) \
    , 0 }


/*
 * Nameserver
 */
struct  _ServiceInfo
{
  ProtobufCMessage base;
  char *name;
  uint64_t sid;
};
#define SERVICE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&service_info__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _NsLookupRequest
{
  ProtobufCMessage base;
  char *name;
};
#define NS_LOOKUP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_lookup_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _NsLookupResponse
{
  ProtobufCMessage base;
  uint64_t sid;
};
#define NS_LOOKUP_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_lookup_response__descriptor) \
    , 0 }


struct  _NsRegisterRequest
{
  ProtobufCMessage base;
  ServiceInfo *service;
};
#define NS_REGISTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_register_request__descriptor) \
    , NULL }


struct  _NsEnumerateRequest
{
  ProtobufCMessage base;
  char *prefix;
};
#define NS_ENUMERATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_enumerate_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _NsDeregisterRequest
{
  ProtobufCMessage base;
  char *name;
};
#define NS_DEREGISTER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_deregister_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _NsEnumerateResponse
{
  ProtobufCMessage base;
  size_t n_services;
  ServiceInfo **services;
};
#define NS_ENUMERATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ns_enumerate_response__descriptor) \
    , 0,NULL }


struct  _CreateUdpEndpointRequest
{
  ProtobufCMessage base;
  uint32_t port;
  uint32_t is_high_speed_connection;
};
#define CREATE_UDP_ENDPOINT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_udp_endpoint_request__descriptor) \
    , 0, 0 }


struct  _CreateTcpConnectionRequest
{
  ProtobufCMessage base;
  uint32_t src_port;
  uint32_t dst_port;
  uint32_t dst_ip;
  uint64_t timeout;
  uint32_t is_high_speed_connection;
};
#define CREATE_TCP_CONNECTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_tcp_connection_request__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _ArpRequest
{
  ProtobufCMessage base;
  uint32_t ip_addr;
  uint64_t timeout;
};
#define ARP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arp_request__descriptor) \
    , 0, 0 }


struct  _ArpTableResponse
{
  ProtobufCMessage base;
  size_t n_ip_addr;
  uint32_t *ip_addr;
  size_t n_mac_addr;
  uint64_t *mac_addr;
};
#define ARP_TABLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&arp_table_response__descriptor) \
    , 0,NULL, 0,NULL }


struct  _CreateTcpServerRequest
{
  ProtobufCMessage base;
  uint32_t port;
  char *service_name;
  uint32_t is_high_speed_connection;
};
#define CREATE_TCP_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&create_tcp_server_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0 }


struct  _ConnectTcpClientRequest
{
  ProtobufCMessage base;
  uint32_t port;
  uint32_t ip_addr;
};
#define CONNECT_TCP_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&connect_tcp_client_request__descriptor) \
    , 0, 0 }


/*
 * Open
 */
struct  _FSOpenRequest
{
  ProtobufCMessage base;
  char *path;
  int32_t flags;
};
#define FSOPEN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsopen_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _FSOpenResponse
{
  ProtobufCMessage base;
  uint64_t fd;
  uint32_t size;
};
#define FSOPEN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsopen_response__descriptor) \
    , 0, 0 }


/*
 * Create
 */
struct  _FSCreateRequest
{
  ProtobufCMessage base;
  char *path;
  int32_t flags;
  protobuf_c_boolean dir;
};
#define FSCREATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fscreate_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  _FSCreateResponse
{
  ProtobufCMessage base;
  uint64_t fd;
};
#define FSCREATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fscreate_response__descriptor) \
    , 0 }


/*
 * Delete
 */
struct  _FSDeleteRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FSDELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsdelete_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * Close
 */
struct  _FSCloseRequest
{
  ProtobufCMessage base;
  uint64_t fd;
};
#define FSCLOSE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsclose_request__descriptor) \
    , 0 }


/*
 * Read
 */
struct  _FSReadRequest
{
  ProtobufCMessage base;
  uint64_t fd;
  uint64_t offset;
  uint64_t size;
};
#define FSREAD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_request__descriptor) \
    , 0, 0, 0 }


struct  _FSReadResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData raw_bytes;
};
#define FSREAD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_response__descriptor) \
    , {0,NULL} }


/*
 * Read File to Frame
 */
struct  _FSReadFileToFrameRequest
{
  ProtobufCMessage base;
  char *path;
};
#define FSREAD_FILE_TO_FRAME_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_file_to_frame_request__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _FSReadFileToFrameResponse
{
  ProtobufCMessage base;
  uint64_t bytes;
};
#define FSREAD_FILE_TO_FRAME_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_file_to_frame_response__descriptor) \
    , 0 }


/*
 * Write
 */
struct  _FSWriteRequest
{
  ProtobufCMessage base;
  uint64_t fd;
  uint64_t offset;
  ProtobufCBinaryData raw_bytes;
};
#define FSWRITE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fswrite_request__descriptor) \
    , 0, 0, {0,NULL} }


struct  _FSWriteResponse
{
  ProtobufCMessage base;
  uint64_t bytes;
};
#define FSWRITE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fswrite_response__descriptor) \
    , 0 }


/*
 * Truncate
 */
struct  _FSTruncRequest
{
  ProtobufCMessage base;
  uint64_t fd;
  uint64_t bytes;
};
#define FSTRUNC_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fstrunc_request__descriptor) \
    , 0, 0 }


/*
 * Read Directory
 */
struct  _FSReadNextDirRequest
{
  ProtobufCMessage base;
  uint64_t fd;
  uint64_t pos;
};
#define FSREAD_NEXT_DIR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_next_dir_request__descriptor) \
    , 0, 0 }


struct  _FSReadNextDirResponse
{
  ProtobufCMessage base;
  char *name;
  uint64_t idx;
};
#define FSREAD_NEXT_DIR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&fsread_next_dir_response__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  _TermAcquireLockRequest
{
  ProtobufCMessage base;
  uint64_t pid;
};
#define TERM_ACQUIRE_LOCK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_acquire_lock_request__descriptor) \
    , 0 }


struct  _TermAcquireLockResponse
{
  ProtobufCMessage base;
  int64_t status;
};
#define TERM_ACQUIRE_LOCK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_acquire_lock_response__descriptor) \
    , 0 }


struct  _TermReleaseLockRequest
{
  ProtobufCMessage base;
  uint64_t pid;
};
#define TERM_RELEASE_LOCK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_release_lock_request__descriptor) \
    , 0 }


struct  _TermRegisterClientRequest
{
  ProtobufCMessage base;
  uint64_t pid;
  /*
   * optimisation to avoid two msgs (Register & Acquire) being needed
   */
  uint64_t lock;
};
#define TERM_REGISTER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_register_client_request__descriptor) \
    , 0, 0 }


struct  _TermRegisterClientResponse
{
  ProtobufCMessage base;
  int64_t status;
};
#define TERM_REGISTER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_register_client_response__descriptor) \
    , 0 }


struct  _TermWriteStringRequest
{
  ProtobufCMessage base;
  uint64_t pid;
  char *str;
  protobuf_c_boolean try_write;
  uint64_t len;
};
#define TERM_WRITE_STRING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_write_string_request__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0 }


struct  _TermWriteStringResponse
{
  ProtobufCMessage base;
  uint64_t written;
};
#define TERM_WRITE_STRING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_write_string_response__descriptor) \
    , 0 }


struct  _TermReadStringRequest
{
  ProtobufCMessage base;
  uint64_t pid;
};
#define TERM_READ_STRING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_read_string_request__descriptor) \
    , 0 }


struct  _TermReadStringResponse
{
  ProtobufCMessage base;
  char *str;
};
#define TERM_READ_STRING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_read_string_response__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _TermWriteCharRequest
{
  ProtobufCMessage base;
  uint64_t pid;
  uint64_t chr;
  protobuf_c_boolean try_write;
};
#define TERM_WRITE_CHAR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_write_char_request__descriptor) \
    , 0, 0, 0 }


struct  _TermWriteCharResponse
{
  ProtobufCMessage base;
  int64_t status;
};
#define TERM_WRITE_CHAR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_write_char_response__descriptor) \
    , 0 }


struct  _TermReadCharRequest
{
  ProtobufCMessage base;
  uint64_t pid;
  protobuf_c_boolean block;
};
#define TERM_READ_CHAR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_read_char_request__descriptor) \
    , 0, 0 }


struct  _TermReadCharRespnose
{
  ProtobufCMessage base;
  uint64_t chr;
  int64_t status;
};
#define TERM_READ_CHAR_RESPNOSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_read_char_respnose__descriptor) \
    , 0, 0 }


struct  _TermDebugRequest
{
  ProtobufCMessage base;
};
#define TERM_DEBUG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&term_debug_request__descriptor) \
     }


typedef enum {
  RPC_REQUEST_WRAP__DATA__NOT_SET = 0,
  RPC_REQUEST_WRAP__DATA_INIT_SEND_NUMBER = 1,
  RPC_REQUEST_WRAP__DATA_INIT_SEND_STRING = 4,
  RPC_REQUEST_WRAP__DATA_INIT_SERIAL_PUTCHAR = 6,
  RPC_REQUEST_WRAP__DATA_INIT_SERIAL_PUT_STRING = 5,
  RPC_REQUEST_WRAP__DATA_INIT_PROCESS_SPAWN = 2,
  RPC_REQUEST_WRAP__DATA_INIT_PROCESS_GET_NAME = 8,
  RPC_REQUEST_WRAP__DATA_INIT_PROCESS_GET_ALL_PIDS = 38,
  RPC_REQUEST_WRAP__DATA_INIT_PROCESS_INFORM_DEATH = 40,
  RPC_REQUEST_WRAP__DATA_MEM_GET_RAM_CAP = 3,
  RPC_REQUEST_WRAP__DATA_SERVICE_CONNECT = 10,
  RPC_REQUEST_WRAP__DATA_SERVICE_BYTES = 15,
  RPC_REQUEST_WRAP__DATA_ROUTE = 9,
  RPC_REQUEST_WRAP__DATA_TEST_INCREMENT = 11,
  RPC_REQUEST_WRAP__DATA_TEST_CAP_INCREMENT = 12,
  RPC_REQUEST_WRAP__DATA_NS_LOOKUP = 13,
  RPC_REQUEST_WRAP__DATA_NS_REGISTER = 14,
  RPC_REQUEST_WRAP__DATA_TERM_ACQUIRE_LOCK = 27,
  RPC_REQUEST_WRAP__DATA_TERM_RELEASE_LOCK = 28,
  RPC_REQUEST_WRAP__DATA_TERM_REGISTER_CLIENT = 29,
  RPC_REQUEST_WRAP__DATA_TERM_WRITE = 30,
  RPC_REQUEST_WRAP__DATA_TERM_PUTC = 31,
  RPC_REQUEST_WRAP__DATA_TERM_READ_STR = 32,
  RPC_REQUEST_WRAP__DATA_TERM_GETC = 33,
  RPC_REQUEST_WRAP__DATA_TERM_DEBUG = 39,
  RPC_REQUEST_WRAP__DATA_NS_ENUMERATE = 21,
  RPC_REQUEST_WRAP__DATA_NS_DEREGISTER = 22,
  RPC_REQUEST_WRAP__DATA_CREATE_UDP_ENDPOINT = 16,
  RPC_REQUEST_WRAP__DATA_CREATE_TCP_CONNECTION = 17,
  RPC_REQUEST_WRAP__DATA_ARP_REQUEST = 18,
  RPC_REQUEST_WRAP__DATA_CREATE_TCP_SERVER = 19,
  RPC_REQUEST_WRAP__DATA_CONNECT_TCP_CLIENT = 20,
  RPC_REQUEST_WRAP__DATA_FS_OPEN = 23,
  RPC_REQUEST_WRAP__DATA_FS_CREATE = 24,
  RPC_REQUEST_WRAP__DATA_FS_CLOSE = 25,
  RPC_REQUEST_WRAP__DATA_FS_READ = 26,
  RPC_REQUEST_WRAP__DATA_FS_WRITE = 34,
  RPC_REQUEST_WRAP__DATA_FS_TRUNC = 35,
  RPC_REQUEST_WRAP__DATA_FS_READNEXTDIR = 36,
  RPC_REQUEST_WRAP__DATA_FS_DELETE = 37,
  RPC_REQUEST_WRAP__DATA_FS_READ_FILE_TO_FRAME = 41
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC_REQUEST_WRAP__DATA)
} RpcRequestWrap__DataCase;

struct  _RpcRequestWrap
{
  ProtobufCMessage base;
  RpcRequestWrap__DataCase data_case;
  union {
    InitSendNumberRequest *init_send_number;
    InitSendStringRequest *init_send_string;
    InitSerialPutcharRequest *init_serial_putchar;
    InitSerialPutStringRequest *init_serial_put_string;
    InitProcessSpawnRequest *init_process_spawn;
    InitProcessGetNameRequest *init_process_get_name;
    InitProcessGetAllPidsRequest *init_process_get_all_pids;
    InitProcessInformDeathRequest *init_process_inform_death;
    MemGetRamCapRequest *mem_get_ram_cap;
    ServiceConnectRequest *service_connect;
    ServiceBytesRequest *service_bytes;
    RouteRequest *route;
    /*
     * Services
     */
    TestIncrementRequest *test_increment;
    TestCapIncrementRequest *test_cap_increment;
    NsLookupRequest *ns_lookup;
    NsRegisterRequest *ns_register;
    TermAcquireLockRequest *term_acquire_lock;
    TermReleaseLockRequest *term_release_lock;
    TermRegisterClientRequest *term_register_client;
    TermWriteStringRequest *term_write;
    TermWriteCharRequest *term_putc;
    TermReadStringRequest *term_read_str;
    TermReadCharRequest *term_getc;
    TermDebugRequest *term_debug;
    NsEnumerateRequest *ns_enumerate;
    NsDeregisterRequest *ns_deregister;
    CreateUdpEndpointRequest *create_udp_endpoint;
    CreateTcpConnectionRequest *create_tcp_connection;
    ArpRequest *arp_request;
    CreateTcpServerRequest *create_tcp_server;
    ConnectTcpClientRequest *connect_tcp_client;
    FSOpenRequest *fs_open;
    FSCreateRequest *fs_create;
    FSCloseRequest *fs_close;
    FSReadRequest *fs_read;
    FSWriteRequest *fs_write;
    FSTruncRequest *fs_trunc;
    FSReadNextDirRequest *fs_readnextdir;
    FSDeleteRequest *fs_delete;
    FSReadFileToFrameRequest *fs_read_file_to_frame;
  };
};
#define RPC_REQUEST_WRAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_request_wrap__descriptor) \
    , RPC_REQUEST_WRAP__DATA__NOT_SET, {0} }


typedef enum {
  RPC_RESPONSE_WRAP__DATA__NOT_SET = 0,
  RPC_RESPONSE_WRAP__DATA_INIT_PROCESS_SPAWN = 2,
  RPC_RESPONSE_WRAP__DATA_INIT_SERIAL_GETCHAR = 4,
  RPC_RESPONSE_WRAP__DATA_INIT_PROCESS_GET_NAME = 5,
  RPC_RESPONSE_WRAP__DATA_INIT_PROCESS_GET_ALL_PIDS = 6,
  RPC_RESPONSE_WRAP__DATA_MEM_GET_RAM_CAP = 3,
  RPC_RESPONSE_WRAP__DATA_SERVICE_BYTES = 11,
  RPC_RESPONSE_WRAP__DATA_ROUTE = 7,
  RPC_RESPONSE_WRAP__DATA_TEST_INCREMENT = 8,
  RPC_RESPONSE_WRAP__DATA_TEST_CAP_INCREMENT = 9,
  RPC_RESPONSE_WRAP__DATA_NS_LOOKUP = 10,
  RPC_RESPONSE_WRAP__DATA_TERM_WRITE = 16,
  RPC_RESPONSE_WRAP__DATA_TERM_PUTC = 17,
  RPC_RESPONSE_WRAP__DATA_TERM_READ_STR = 18,
  RPC_RESPONSE_WRAP__DATA_TERM_GETC = 19,
  RPC_RESPONSE_WRAP__DATA_TERM_REGISTER_CLIENT = 20,
  RPC_RESPONSE_WRAP__DATA_TERM_ACQUIRE_LOCK = 21,
  RPC_RESPONSE_WRAP__DATA_NS_ENUMERATE = 12,
  RPC_RESPONSE_WRAP__DATA_FS_OPEN = 13,
  RPC_RESPONSE_WRAP__DATA_FS_CREATE = 14,
  RPC_RESPONSE_WRAP__DATA_FS_READ = 15,
  RPC_RESPONSE_WRAP__DATA_FS_WRITE = 22,
  RPC_RESPONSE_WRAP__DATA_FS_READNEXTDIR = 23,
  RPC_RESPONSE_WRAP__DATA_FS_READ_FILE_TO_FRAME = 27,
  RPC_RESPONSE_WRAP__DATA_ARP_TABLE_RESPONSE = 28
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC_RESPONSE_WRAP__DATA)
} RpcResponseWrap__DataCase;

struct  _RpcResponseWrap
{
  ProtobufCMessage base;
  uint64_t err;
  RpcResponseWrap__DataCase data_case;
  union {
    InitProcessSpawnResponse *init_process_spawn;
    InitSerialGetcharResponse *init_serial_getchar;
    InitProcessGetNameResponse *init_process_get_name;
    InitProcessGetAllPidsResponse *init_process_get_all_pids;
    MemGetRamCapResponse *mem_get_ram_cap;
    ServiceBytesResponse *service_bytes;
    RouteResponse *route;
    /*
     * Services
     */
    TestIncrementResponse *test_increment;
    TestCapIncrementResponse *test_cap_increment;
    NsLookupResponse *ns_lookup;
    TermWriteStringResponse *term_write;
    TermWriteCharResponse *term_putc;
    TermReadStringResponse *term_read_str;
    TermReadCharRespnose *term_getc;
    TermRegisterClientResponse *term_register_client;
    TermAcquireLockResponse *term_acquire_lock;
    NsEnumerateResponse *ns_enumerate;
    FSOpenResponse *fs_open;
    FSCreateResponse *fs_create;
    FSReadResponse *fs_read;
    FSWriteResponse *fs_write;
    FSReadNextDirResponse *fs_readnextdir;
    FSReadFileToFrameResponse *fs_read_file_to_frame;
    ArpTableResponse *arp_table_response;
  };
};
#define RPC_RESPONSE_WRAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_response_wrap__descriptor) \
    , 0, RPC_RESPONSE_WRAP__DATA__NOT_SET, {0} }


typedef enum {
  RPC_MESSAGE__DIRECTION__NOT_SET = 0,
  RPC_MESSAGE__DIRECTION_REQUEST = 2,
  RPC_MESSAGE__DIRECTION_RESPONSE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RPC_MESSAGE__DIRECTION)
} RpcMessage__DirectionCase;

struct  _RpcMessage
{
  ProtobufCMessage base;
  RpcMethod method;
  RpcMessage__DirectionCase direction_case;
  union {
    RpcRequestWrap *request;
    RpcResponseWrap *response;
  };
};
#define RPC_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc_message__descriptor) \
    , RPC_METHOD__INIT_SEND_NUMBER, RPC_MESSAGE__DIRECTION__NOT_SET, {0} }


/* InitSendNumberRequest methods */
void   init_send_number_request__init
                     (InitSendNumberRequest         *message);
size_t init_send_number_request__get_packed_size
                     (const InitSendNumberRequest   *message);
size_t init_send_number_request__pack
                     (const InitSendNumberRequest   *message,
                      uint8_t             *out);
size_t init_send_number_request__pack_to_buffer
                     (const InitSendNumberRequest   *message,
                      ProtobufCBuffer     *buffer);
InitSendNumberRequest *
       init_send_number_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_send_number_request__free_unpacked
                     (InitSendNumberRequest *message,
                      ProtobufCAllocator *allocator);
/* InitSendStringRequest methods */
void   init_send_string_request__init
                     (InitSendStringRequest         *message);
size_t init_send_string_request__get_packed_size
                     (const InitSendStringRequest   *message);
size_t init_send_string_request__pack
                     (const InitSendStringRequest   *message,
                      uint8_t             *out);
size_t init_send_string_request__pack_to_buffer
                     (const InitSendStringRequest   *message,
                      ProtobufCBuffer     *buffer);
InitSendStringRequest *
       init_send_string_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_send_string_request__free_unpacked
                     (InitSendStringRequest *message,
                      ProtobufCAllocator *allocator);
/* InitSerialPutStringRequest methods */
void   init_serial_put_string_request__init
                     (InitSerialPutStringRequest         *message);
size_t init_serial_put_string_request__get_packed_size
                     (const InitSerialPutStringRequest   *message);
size_t init_serial_put_string_request__pack
                     (const InitSerialPutStringRequest   *message,
                      uint8_t             *out);
size_t init_serial_put_string_request__pack_to_buffer
                     (const InitSerialPutStringRequest   *message,
                      ProtobufCBuffer     *buffer);
InitSerialPutStringRequest *
       init_serial_put_string_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_serial_put_string_request__free_unpacked
                     (InitSerialPutStringRequest *message,
                      ProtobufCAllocator *allocator);
/* InitSerialPutcharRequest methods */
void   init_serial_putchar_request__init
                     (InitSerialPutcharRequest         *message);
size_t init_serial_putchar_request__get_packed_size
                     (const InitSerialPutcharRequest   *message);
size_t init_serial_putchar_request__pack
                     (const InitSerialPutcharRequest   *message,
                      uint8_t             *out);
size_t init_serial_putchar_request__pack_to_buffer
                     (const InitSerialPutcharRequest   *message,
                      ProtobufCBuffer     *buffer);
InitSerialPutcharRequest *
       init_serial_putchar_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_serial_putchar_request__free_unpacked
                     (InitSerialPutcharRequest *message,
                      ProtobufCAllocator *allocator);
/* InitSerialGetcharResponse methods */
void   init_serial_getchar_response__init
                     (InitSerialGetcharResponse         *message);
size_t init_serial_getchar_response__get_packed_size
                     (const InitSerialGetcharResponse   *message);
size_t init_serial_getchar_response__pack
                     (const InitSerialGetcharResponse   *message,
                      uint8_t             *out);
size_t init_serial_getchar_response__pack_to_buffer
                     (const InitSerialGetcharResponse   *message,
                      ProtobufCBuffer     *buffer);
InitSerialGetcharResponse *
       init_serial_getchar_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_serial_getchar_response__free_unpacked
                     (InitSerialGetcharResponse *message,
                      ProtobufCAllocator *allocator);
/* InitProcessSpawnRequest methods */
void   init_process_spawn_request__init
                     (InitProcessSpawnRequest         *message);
size_t init_process_spawn_request__get_packed_size
                     (const InitProcessSpawnRequest   *message);
size_t init_process_spawn_request__pack
                     (const InitProcessSpawnRequest   *message,
                      uint8_t             *out);
size_t init_process_spawn_request__pack_to_buffer
                     (const InitProcessSpawnRequest   *message,
                      ProtobufCBuffer     *buffer);
InitProcessSpawnRequest *
       init_process_spawn_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_spawn_request__free_unpacked
                     (InitProcessSpawnRequest *message,
                      ProtobufCAllocator *allocator);
/* InitProcessSpawnResponse methods */
void   init_process_spawn_response__init
                     (InitProcessSpawnResponse         *message);
size_t init_process_spawn_response__get_packed_size
                     (const InitProcessSpawnResponse   *message);
size_t init_process_spawn_response__pack
                     (const InitProcessSpawnResponse   *message,
                      uint8_t             *out);
size_t init_process_spawn_response__pack_to_buffer
                     (const InitProcessSpawnResponse   *message,
                      ProtobufCBuffer     *buffer);
InitProcessSpawnResponse *
       init_process_spawn_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_spawn_response__free_unpacked
                     (InitProcessSpawnResponse *message,
                      ProtobufCAllocator *allocator);
/* InitProcessGetNameRequest methods */
void   init_process_get_name_request__init
                     (InitProcessGetNameRequest         *message);
size_t init_process_get_name_request__get_packed_size
                     (const InitProcessGetNameRequest   *message);
size_t init_process_get_name_request__pack
                     (const InitProcessGetNameRequest   *message,
                      uint8_t             *out);
size_t init_process_get_name_request__pack_to_buffer
                     (const InitProcessGetNameRequest   *message,
                      ProtobufCBuffer     *buffer);
InitProcessGetNameRequest *
       init_process_get_name_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_get_name_request__free_unpacked
                     (InitProcessGetNameRequest *message,
                      ProtobufCAllocator *allocator);
/* InitProcessGetNameResponse methods */
void   init_process_get_name_response__init
                     (InitProcessGetNameResponse         *message);
size_t init_process_get_name_response__get_packed_size
                     (const InitProcessGetNameResponse   *message);
size_t init_process_get_name_response__pack
                     (const InitProcessGetNameResponse   *message,
                      uint8_t             *out);
size_t init_process_get_name_response__pack_to_buffer
                     (const InitProcessGetNameResponse   *message,
                      ProtobufCBuffer     *buffer);
InitProcessGetNameResponse *
       init_process_get_name_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_get_name_response__free_unpacked
                     (InitProcessGetNameResponse *message,
                      ProtobufCAllocator *allocator);
/* InitProcessGetAllPidsRequest methods */
void   init_process_get_all_pids_request__init
                     (InitProcessGetAllPidsRequest         *message);
size_t init_process_get_all_pids_request__get_packed_size
                     (const InitProcessGetAllPidsRequest   *message);
size_t init_process_get_all_pids_request__pack
                     (const InitProcessGetAllPidsRequest   *message,
                      uint8_t             *out);
size_t init_process_get_all_pids_request__pack_to_buffer
                     (const InitProcessGetAllPidsRequest   *message,
                      ProtobufCBuffer     *buffer);
InitProcessGetAllPidsRequest *
       init_process_get_all_pids_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_get_all_pids_request__free_unpacked
                     (InitProcessGetAllPidsRequest *message,
                      ProtobufCAllocator *allocator);
/* InitProcessGetAllPidsResponse methods */
void   init_process_get_all_pids_response__init
                     (InitProcessGetAllPidsResponse         *message);
size_t init_process_get_all_pids_response__get_packed_size
                     (const InitProcessGetAllPidsResponse   *message);
size_t init_process_get_all_pids_response__pack
                     (const InitProcessGetAllPidsResponse   *message,
                      uint8_t             *out);
size_t init_process_get_all_pids_response__pack_to_buffer
                     (const InitProcessGetAllPidsResponse   *message,
                      ProtobufCBuffer     *buffer);
InitProcessGetAllPidsResponse *
       init_process_get_all_pids_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_get_all_pids_response__free_unpacked
                     (InitProcessGetAllPidsResponse *message,
                      ProtobufCAllocator *allocator);
/* InitProcessInformDeathRequest methods */
void   init_process_inform_death_request__init
                     (InitProcessInformDeathRequest         *message);
size_t init_process_inform_death_request__get_packed_size
                     (const InitProcessInformDeathRequest   *message);
size_t init_process_inform_death_request__pack
                     (const InitProcessInformDeathRequest   *message,
                      uint8_t             *out);
size_t init_process_inform_death_request__pack_to_buffer
                     (const InitProcessInformDeathRequest   *message,
                      ProtobufCBuffer     *buffer);
InitProcessInformDeathRequest *
       init_process_inform_death_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_process_inform_death_request__free_unpacked
                     (InitProcessInformDeathRequest *message,
                      ProtobufCAllocator *allocator);
/* RouteRequest methods */
void   route_request__init
                     (RouteRequest         *message);
size_t route_request__get_packed_size
                     (const RouteRequest   *message);
size_t route_request__pack
                     (const RouteRequest   *message,
                      uint8_t             *out);
size_t route_request__pack_to_buffer
                     (const RouteRequest   *message,
                      ProtobufCBuffer     *buffer);
RouteRequest *
       route_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   route_request__free_unpacked
                     (RouteRequest *message,
                      ProtobufCAllocator *allocator);
/* RouteResponse methods */
void   route_response__init
                     (RouteResponse         *message);
size_t route_response__get_packed_size
                     (const RouteResponse   *message);
size_t route_response__pack
                     (const RouteResponse   *message,
                      uint8_t             *out);
size_t route_response__pack_to_buffer
                     (const RouteResponse   *message,
                      ProtobufCBuffer     *buffer);
RouteResponse *
       route_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   route_response__free_unpacked
                     (RouteResponse *message,
                      ProtobufCAllocator *allocator);
/* MemGetRamCapRequest methods */
void   mem_get_ram_cap_request__init
                     (MemGetRamCapRequest         *message);
size_t mem_get_ram_cap_request__get_packed_size
                     (const MemGetRamCapRequest   *message);
size_t mem_get_ram_cap_request__pack
                     (const MemGetRamCapRequest   *message,
                      uint8_t             *out);
size_t mem_get_ram_cap_request__pack_to_buffer
                     (const MemGetRamCapRequest   *message,
                      ProtobufCBuffer     *buffer);
MemGetRamCapRequest *
       mem_get_ram_cap_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem_get_ram_cap_request__free_unpacked
                     (MemGetRamCapRequest *message,
                      ProtobufCAllocator *allocator);
/* MemGetRamCapResponse methods */
void   mem_get_ram_cap_response__init
                     (MemGetRamCapResponse         *message);
size_t mem_get_ram_cap_response__get_packed_size
                     (const MemGetRamCapResponse   *message);
size_t mem_get_ram_cap_response__pack
                     (const MemGetRamCapResponse   *message,
                      uint8_t             *out);
size_t mem_get_ram_cap_response__pack_to_buffer
                     (const MemGetRamCapResponse   *message,
                      ProtobufCBuffer     *buffer);
MemGetRamCapResponse *
       mem_get_ram_cap_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mem_get_ram_cap_response__free_unpacked
                     (MemGetRamCapResponse *message,
                      ProtobufCAllocator *allocator);
/* ServiceConnectRequest methods */
void   service_connect_request__init
                     (ServiceConnectRequest         *message);
size_t service_connect_request__get_packed_size
                     (const ServiceConnectRequest   *message);
size_t service_connect_request__pack
                     (const ServiceConnectRequest   *message,
                      uint8_t             *out);
size_t service_connect_request__pack_to_buffer
                     (const ServiceConnectRequest   *message,
                      ProtobufCBuffer     *buffer);
ServiceConnectRequest *
       service_connect_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   service_connect_request__free_unpacked
                     (ServiceConnectRequest *message,
                      ProtobufCAllocator *allocator);
/* ServiceBytesRequest methods */
void   service_bytes_request__init
                     (ServiceBytesRequest         *message);
size_t service_bytes_request__get_packed_size
                     (const ServiceBytesRequest   *message);
size_t service_bytes_request__pack
                     (const ServiceBytesRequest   *message,
                      uint8_t             *out);
size_t service_bytes_request__pack_to_buffer
                     (const ServiceBytesRequest   *message,
                      ProtobufCBuffer     *buffer);
ServiceBytesRequest *
       service_bytes_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   service_bytes_request__free_unpacked
                     (ServiceBytesRequest *message,
                      ProtobufCAllocator *allocator);
/* ServiceBytesResponse methods */
void   service_bytes_response__init
                     (ServiceBytesResponse         *message);
size_t service_bytes_response__get_packed_size
                     (const ServiceBytesResponse   *message);
size_t service_bytes_response__pack
                     (const ServiceBytesResponse   *message,
                      uint8_t             *out);
size_t service_bytes_response__pack_to_buffer
                     (const ServiceBytesResponse   *message,
                      ProtobufCBuffer     *buffer);
ServiceBytesResponse *
       service_bytes_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   service_bytes_response__free_unpacked
                     (ServiceBytesResponse *message,
                      ProtobufCAllocator *allocator);
/* TestIncrementRequest methods */
void   test_increment_request__init
                     (TestIncrementRequest         *message);
size_t test_increment_request__get_packed_size
                     (const TestIncrementRequest   *message);
size_t test_increment_request__pack
                     (const TestIncrementRequest   *message,
                      uint8_t             *out);
size_t test_increment_request__pack_to_buffer
                     (const TestIncrementRequest   *message,
                      ProtobufCBuffer     *buffer);
TestIncrementRequest *
       test_increment_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_increment_request__free_unpacked
                     (TestIncrementRequest *message,
                      ProtobufCAllocator *allocator);
/* TestIncrementResponse methods */
void   test_increment_response__init
                     (TestIncrementResponse         *message);
size_t test_increment_response__get_packed_size
                     (const TestIncrementResponse   *message);
size_t test_increment_response__pack
                     (const TestIncrementResponse   *message,
                      uint8_t             *out);
size_t test_increment_response__pack_to_buffer
                     (const TestIncrementResponse   *message,
                      ProtobufCBuffer     *buffer);
TestIncrementResponse *
       test_increment_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_increment_response__free_unpacked
                     (TestIncrementResponse *message,
                      ProtobufCAllocator *allocator);
/* TestCapIncrementRequest methods */
void   test_cap_increment_request__init
                     (TestCapIncrementRequest         *message);
size_t test_cap_increment_request__get_packed_size
                     (const TestCapIncrementRequest   *message);
size_t test_cap_increment_request__pack
                     (const TestCapIncrementRequest   *message,
                      uint8_t             *out);
size_t test_cap_increment_request__pack_to_buffer
                     (const TestCapIncrementRequest   *message,
                      ProtobufCBuffer     *buffer);
TestCapIncrementRequest *
       test_cap_increment_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_cap_increment_request__free_unpacked
                     (TestCapIncrementRequest *message,
                      ProtobufCAllocator *allocator);
/* TestCapIncrementResponse methods */
void   test_cap_increment_response__init
                     (TestCapIncrementResponse         *message);
size_t test_cap_increment_response__get_packed_size
                     (const TestCapIncrementResponse   *message);
size_t test_cap_increment_response__pack
                     (const TestCapIncrementResponse   *message,
                      uint8_t             *out);
size_t test_cap_increment_response__pack_to_buffer
                     (const TestCapIncrementResponse   *message,
                      ProtobufCBuffer     *buffer);
TestCapIncrementResponse *
       test_cap_increment_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_cap_increment_response__free_unpacked
                     (TestCapIncrementResponse *message,
                      ProtobufCAllocator *allocator);
/* ServiceInfo methods */
void   service_info__init
                     (ServiceInfo         *message);
size_t service_info__get_packed_size
                     (const ServiceInfo   *message);
size_t service_info__pack
                     (const ServiceInfo   *message,
                      uint8_t             *out);
size_t service_info__pack_to_buffer
                     (const ServiceInfo   *message,
                      ProtobufCBuffer     *buffer);
ServiceInfo *
       service_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   service_info__free_unpacked
                     (ServiceInfo *message,
                      ProtobufCAllocator *allocator);
/* NsLookupRequest methods */
void   ns_lookup_request__init
                     (NsLookupRequest         *message);
size_t ns_lookup_request__get_packed_size
                     (const NsLookupRequest   *message);
size_t ns_lookup_request__pack
                     (const NsLookupRequest   *message,
                      uint8_t             *out);
size_t ns_lookup_request__pack_to_buffer
                     (const NsLookupRequest   *message,
                      ProtobufCBuffer     *buffer);
NsLookupRequest *
       ns_lookup_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_lookup_request__free_unpacked
                     (NsLookupRequest *message,
                      ProtobufCAllocator *allocator);
/* NsLookupResponse methods */
void   ns_lookup_response__init
                     (NsLookupResponse         *message);
size_t ns_lookup_response__get_packed_size
                     (const NsLookupResponse   *message);
size_t ns_lookup_response__pack
                     (const NsLookupResponse   *message,
                      uint8_t             *out);
size_t ns_lookup_response__pack_to_buffer
                     (const NsLookupResponse   *message,
                      ProtobufCBuffer     *buffer);
NsLookupResponse *
       ns_lookup_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_lookup_response__free_unpacked
                     (NsLookupResponse *message,
                      ProtobufCAllocator *allocator);
/* NsRegisterRequest methods */
void   ns_register_request__init
                     (NsRegisterRequest         *message);
size_t ns_register_request__get_packed_size
                     (const NsRegisterRequest   *message);
size_t ns_register_request__pack
                     (const NsRegisterRequest   *message,
                      uint8_t             *out);
size_t ns_register_request__pack_to_buffer
                     (const NsRegisterRequest   *message,
                      ProtobufCBuffer     *buffer);
NsRegisterRequest *
       ns_register_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_register_request__free_unpacked
                     (NsRegisterRequest *message,
                      ProtobufCAllocator *allocator);
/* NsEnumerateRequest methods */
void   ns_enumerate_request__init
                     (NsEnumerateRequest         *message);
size_t ns_enumerate_request__get_packed_size
                     (const NsEnumerateRequest   *message);
size_t ns_enumerate_request__pack
                     (const NsEnumerateRequest   *message,
                      uint8_t             *out);
size_t ns_enumerate_request__pack_to_buffer
                     (const NsEnumerateRequest   *message,
                      ProtobufCBuffer     *buffer);
NsEnumerateRequest *
       ns_enumerate_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_enumerate_request__free_unpacked
                     (NsEnumerateRequest *message,
                      ProtobufCAllocator *allocator);
/* NsDeregisterRequest methods */
void   ns_deregister_request__init
                     (NsDeregisterRequest         *message);
size_t ns_deregister_request__get_packed_size
                     (const NsDeregisterRequest   *message);
size_t ns_deregister_request__pack
                     (const NsDeregisterRequest   *message,
                      uint8_t             *out);
size_t ns_deregister_request__pack_to_buffer
                     (const NsDeregisterRequest   *message,
                      ProtobufCBuffer     *buffer);
NsDeregisterRequest *
       ns_deregister_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_deregister_request__free_unpacked
                     (NsDeregisterRequest *message,
                      ProtobufCAllocator *allocator);
/* NsEnumerateResponse methods */
void   ns_enumerate_response__init
                     (NsEnumerateResponse         *message);
size_t ns_enumerate_response__get_packed_size
                     (const NsEnumerateResponse   *message);
size_t ns_enumerate_response__pack
                     (const NsEnumerateResponse   *message,
                      uint8_t             *out);
size_t ns_enumerate_response__pack_to_buffer
                     (const NsEnumerateResponse   *message,
                      ProtobufCBuffer     *buffer);
NsEnumerateResponse *
       ns_enumerate_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ns_enumerate_response__free_unpacked
                     (NsEnumerateResponse *message,
                      ProtobufCAllocator *allocator);
/* CreateUdpEndpointRequest methods */
void   create_udp_endpoint_request__init
                     (CreateUdpEndpointRequest         *message);
size_t create_udp_endpoint_request__get_packed_size
                     (const CreateUdpEndpointRequest   *message);
size_t create_udp_endpoint_request__pack
                     (const CreateUdpEndpointRequest   *message,
                      uint8_t             *out);
size_t create_udp_endpoint_request__pack_to_buffer
                     (const CreateUdpEndpointRequest   *message,
                      ProtobufCBuffer     *buffer);
CreateUdpEndpointRequest *
       create_udp_endpoint_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_udp_endpoint_request__free_unpacked
                     (CreateUdpEndpointRequest *message,
                      ProtobufCAllocator *allocator);
/* CreateTcpConnectionRequest methods */
void   create_tcp_connection_request__init
                     (CreateTcpConnectionRequest         *message);
size_t create_tcp_connection_request__get_packed_size
                     (const CreateTcpConnectionRequest   *message);
size_t create_tcp_connection_request__pack
                     (const CreateTcpConnectionRequest   *message,
                      uint8_t             *out);
size_t create_tcp_connection_request__pack_to_buffer
                     (const CreateTcpConnectionRequest   *message,
                      ProtobufCBuffer     *buffer);
CreateTcpConnectionRequest *
       create_tcp_connection_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_tcp_connection_request__free_unpacked
                     (CreateTcpConnectionRequest *message,
                      ProtobufCAllocator *allocator);
/* ArpRequest methods */
void   arp_request__init
                     (ArpRequest         *message);
size_t arp_request__get_packed_size
                     (const ArpRequest   *message);
size_t arp_request__pack
                     (const ArpRequest   *message,
                      uint8_t             *out);
size_t arp_request__pack_to_buffer
                     (const ArpRequest   *message,
                      ProtobufCBuffer     *buffer);
ArpRequest *
       arp_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arp_request__free_unpacked
                     (ArpRequest *message,
                      ProtobufCAllocator *allocator);
/* ArpTableResponse methods */
void   arp_table_response__init
                     (ArpTableResponse         *message);
size_t arp_table_response__get_packed_size
                     (const ArpTableResponse   *message);
size_t arp_table_response__pack
                     (const ArpTableResponse   *message,
                      uint8_t             *out);
size_t arp_table_response__pack_to_buffer
                     (const ArpTableResponse   *message,
                      ProtobufCBuffer     *buffer);
ArpTableResponse *
       arp_table_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   arp_table_response__free_unpacked
                     (ArpTableResponse *message,
                      ProtobufCAllocator *allocator);
/* CreateTcpServerRequest methods */
void   create_tcp_server_request__init
                     (CreateTcpServerRequest         *message);
size_t create_tcp_server_request__get_packed_size
                     (const CreateTcpServerRequest   *message);
size_t create_tcp_server_request__pack
                     (const CreateTcpServerRequest   *message,
                      uint8_t             *out);
size_t create_tcp_server_request__pack_to_buffer
                     (const CreateTcpServerRequest   *message,
                      ProtobufCBuffer     *buffer);
CreateTcpServerRequest *
       create_tcp_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   create_tcp_server_request__free_unpacked
                     (CreateTcpServerRequest *message,
                      ProtobufCAllocator *allocator);
/* ConnectTcpClientRequest methods */
void   connect_tcp_client_request__init
                     (ConnectTcpClientRequest         *message);
size_t connect_tcp_client_request__get_packed_size
                     (const ConnectTcpClientRequest   *message);
size_t connect_tcp_client_request__pack
                     (const ConnectTcpClientRequest   *message,
                      uint8_t             *out);
size_t connect_tcp_client_request__pack_to_buffer
                     (const ConnectTcpClientRequest   *message,
                      ProtobufCBuffer     *buffer);
ConnectTcpClientRequest *
       connect_tcp_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   connect_tcp_client_request__free_unpacked
                     (ConnectTcpClientRequest *message,
                      ProtobufCAllocator *allocator);
/* FSOpenRequest methods */
void   fsopen_request__init
                     (FSOpenRequest         *message);
size_t fsopen_request__get_packed_size
                     (const FSOpenRequest   *message);
size_t fsopen_request__pack
                     (const FSOpenRequest   *message,
                      uint8_t             *out);
size_t fsopen_request__pack_to_buffer
                     (const FSOpenRequest   *message,
                      ProtobufCBuffer     *buffer);
FSOpenRequest *
       fsopen_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsopen_request__free_unpacked
                     (FSOpenRequest *message,
                      ProtobufCAllocator *allocator);
/* FSOpenResponse methods */
void   fsopen_response__init
                     (FSOpenResponse         *message);
size_t fsopen_response__get_packed_size
                     (const FSOpenResponse   *message);
size_t fsopen_response__pack
                     (const FSOpenResponse   *message,
                      uint8_t             *out);
size_t fsopen_response__pack_to_buffer
                     (const FSOpenResponse   *message,
                      ProtobufCBuffer     *buffer);
FSOpenResponse *
       fsopen_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsopen_response__free_unpacked
                     (FSOpenResponse *message,
                      ProtobufCAllocator *allocator);
/* FSCreateRequest methods */
void   fscreate_request__init
                     (FSCreateRequest         *message);
size_t fscreate_request__get_packed_size
                     (const FSCreateRequest   *message);
size_t fscreate_request__pack
                     (const FSCreateRequest   *message,
                      uint8_t             *out);
size_t fscreate_request__pack_to_buffer
                     (const FSCreateRequest   *message,
                      ProtobufCBuffer     *buffer);
FSCreateRequest *
       fscreate_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fscreate_request__free_unpacked
                     (FSCreateRequest *message,
                      ProtobufCAllocator *allocator);
/* FSCreateResponse methods */
void   fscreate_response__init
                     (FSCreateResponse         *message);
size_t fscreate_response__get_packed_size
                     (const FSCreateResponse   *message);
size_t fscreate_response__pack
                     (const FSCreateResponse   *message,
                      uint8_t             *out);
size_t fscreate_response__pack_to_buffer
                     (const FSCreateResponse   *message,
                      ProtobufCBuffer     *buffer);
FSCreateResponse *
       fscreate_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fscreate_response__free_unpacked
                     (FSCreateResponse *message,
                      ProtobufCAllocator *allocator);
/* FSDeleteRequest methods */
void   fsdelete_request__init
                     (FSDeleteRequest         *message);
size_t fsdelete_request__get_packed_size
                     (const FSDeleteRequest   *message);
size_t fsdelete_request__pack
                     (const FSDeleteRequest   *message,
                      uint8_t             *out);
size_t fsdelete_request__pack_to_buffer
                     (const FSDeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
FSDeleteRequest *
       fsdelete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsdelete_request__free_unpacked
                     (FSDeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* FSCloseRequest methods */
void   fsclose_request__init
                     (FSCloseRequest         *message);
size_t fsclose_request__get_packed_size
                     (const FSCloseRequest   *message);
size_t fsclose_request__pack
                     (const FSCloseRequest   *message,
                      uint8_t             *out);
size_t fsclose_request__pack_to_buffer
                     (const FSCloseRequest   *message,
                      ProtobufCBuffer     *buffer);
FSCloseRequest *
       fsclose_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsclose_request__free_unpacked
                     (FSCloseRequest *message,
                      ProtobufCAllocator *allocator);
/* FSReadRequest methods */
void   fsread_request__init
                     (FSReadRequest         *message);
size_t fsread_request__get_packed_size
                     (const FSReadRequest   *message);
size_t fsread_request__pack
                     (const FSReadRequest   *message,
                      uint8_t             *out);
size_t fsread_request__pack_to_buffer
                     (const FSReadRequest   *message,
                      ProtobufCBuffer     *buffer);
FSReadRequest *
       fsread_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_request__free_unpacked
                     (FSReadRequest *message,
                      ProtobufCAllocator *allocator);
/* FSReadResponse methods */
void   fsread_response__init
                     (FSReadResponse         *message);
size_t fsread_response__get_packed_size
                     (const FSReadResponse   *message);
size_t fsread_response__pack
                     (const FSReadResponse   *message,
                      uint8_t             *out);
size_t fsread_response__pack_to_buffer
                     (const FSReadResponse   *message,
                      ProtobufCBuffer     *buffer);
FSReadResponse *
       fsread_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_response__free_unpacked
                     (FSReadResponse *message,
                      ProtobufCAllocator *allocator);
/* FSReadFileToFrameRequest methods */
void   fsread_file_to_frame_request__init
                     (FSReadFileToFrameRequest         *message);
size_t fsread_file_to_frame_request__get_packed_size
                     (const FSReadFileToFrameRequest   *message);
size_t fsread_file_to_frame_request__pack
                     (const FSReadFileToFrameRequest   *message,
                      uint8_t             *out);
size_t fsread_file_to_frame_request__pack_to_buffer
                     (const FSReadFileToFrameRequest   *message,
                      ProtobufCBuffer     *buffer);
FSReadFileToFrameRequest *
       fsread_file_to_frame_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_file_to_frame_request__free_unpacked
                     (FSReadFileToFrameRequest *message,
                      ProtobufCAllocator *allocator);
/* FSReadFileToFrameResponse methods */
void   fsread_file_to_frame_response__init
                     (FSReadFileToFrameResponse         *message);
size_t fsread_file_to_frame_response__get_packed_size
                     (const FSReadFileToFrameResponse   *message);
size_t fsread_file_to_frame_response__pack
                     (const FSReadFileToFrameResponse   *message,
                      uint8_t             *out);
size_t fsread_file_to_frame_response__pack_to_buffer
                     (const FSReadFileToFrameResponse   *message,
                      ProtobufCBuffer     *buffer);
FSReadFileToFrameResponse *
       fsread_file_to_frame_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_file_to_frame_response__free_unpacked
                     (FSReadFileToFrameResponse *message,
                      ProtobufCAllocator *allocator);
/* FSWriteRequest methods */
void   fswrite_request__init
                     (FSWriteRequest         *message);
size_t fswrite_request__get_packed_size
                     (const FSWriteRequest   *message);
size_t fswrite_request__pack
                     (const FSWriteRequest   *message,
                      uint8_t             *out);
size_t fswrite_request__pack_to_buffer
                     (const FSWriteRequest   *message,
                      ProtobufCBuffer     *buffer);
FSWriteRequest *
       fswrite_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fswrite_request__free_unpacked
                     (FSWriteRequest *message,
                      ProtobufCAllocator *allocator);
/* FSWriteResponse methods */
void   fswrite_response__init
                     (FSWriteResponse         *message);
size_t fswrite_response__get_packed_size
                     (const FSWriteResponse   *message);
size_t fswrite_response__pack
                     (const FSWriteResponse   *message,
                      uint8_t             *out);
size_t fswrite_response__pack_to_buffer
                     (const FSWriteResponse   *message,
                      ProtobufCBuffer     *buffer);
FSWriteResponse *
       fswrite_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fswrite_response__free_unpacked
                     (FSWriteResponse *message,
                      ProtobufCAllocator *allocator);
/* FSTruncRequest methods */
void   fstrunc_request__init
                     (FSTruncRequest         *message);
size_t fstrunc_request__get_packed_size
                     (const FSTruncRequest   *message);
size_t fstrunc_request__pack
                     (const FSTruncRequest   *message,
                      uint8_t             *out);
size_t fstrunc_request__pack_to_buffer
                     (const FSTruncRequest   *message,
                      ProtobufCBuffer     *buffer);
FSTruncRequest *
       fstrunc_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fstrunc_request__free_unpacked
                     (FSTruncRequest *message,
                      ProtobufCAllocator *allocator);
/* FSReadNextDirRequest methods */
void   fsread_next_dir_request__init
                     (FSReadNextDirRequest         *message);
size_t fsread_next_dir_request__get_packed_size
                     (const FSReadNextDirRequest   *message);
size_t fsread_next_dir_request__pack
                     (const FSReadNextDirRequest   *message,
                      uint8_t             *out);
size_t fsread_next_dir_request__pack_to_buffer
                     (const FSReadNextDirRequest   *message,
                      ProtobufCBuffer     *buffer);
FSReadNextDirRequest *
       fsread_next_dir_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_next_dir_request__free_unpacked
                     (FSReadNextDirRequest *message,
                      ProtobufCAllocator *allocator);
/* FSReadNextDirResponse methods */
void   fsread_next_dir_response__init
                     (FSReadNextDirResponse         *message);
size_t fsread_next_dir_response__get_packed_size
                     (const FSReadNextDirResponse   *message);
size_t fsread_next_dir_response__pack
                     (const FSReadNextDirResponse   *message,
                      uint8_t             *out);
size_t fsread_next_dir_response__pack_to_buffer
                     (const FSReadNextDirResponse   *message,
                      ProtobufCBuffer     *buffer);
FSReadNextDirResponse *
       fsread_next_dir_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   fsread_next_dir_response__free_unpacked
                     (FSReadNextDirResponse *message,
                      ProtobufCAllocator *allocator);
/* TermAcquireLockRequest methods */
void   term_acquire_lock_request__init
                     (TermAcquireLockRequest         *message);
size_t term_acquire_lock_request__get_packed_size
                     (const TermAcquireLockRequest   *message);
size_t term_acquire_lock_request__pack
                     (const TermAcquireLockRequest   *message,
                      uint8_t             *out);
size_t term_acquire_lock_request__pack_to_buffer
                     (const TermAcquireLockRequest   *message,
                      ProtobufCBuffer     *buffer);
TermAcquireLockRequest *
       term_acquire_lock_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_acquire_lock_request__free_unpacked
                     (TermAcquireLockRequest *message,
                      ProtobufCAllocator *allocator);
/* TermAcquireLockResponse methods */
void   term_acquire_lock_response__init
                     (TermAcquireLockResponse         *message);
size_t term_acquire_lock_response__get_packed_size
                     (const TermAcquireLockResponse   *message);
size_t term_acquire_lock_response__pack
                     (const TermAcquireLockResponse   *message,
                      uint8_t             *out);
size_t term_acquire_lock_response__pack_to_buffer
                     (const TermAcquireLockResponse   *message,
                      ProtobufCBuffer     *buffer);
TermAcquireLockResponse *
       term_acquire_lock_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_acquire_lock_response__free_unpacked
                     (TermAcquireLockResponse *message,
                      ProtobufCAllocator *allocator);
/* TermReleaseLockRequest methods */
void   term_release_lock_request__init
                     (TermReleaseLockRequest         *message);
size_t term_release_lock_request__get_packed_size
                     (const TermReleaseLockRequest   *message);
size_t term_release_lock_request__pack
                     (const TermReleaseLockRequest   *message,
                      uint8_t             *out);
size_t term_release_lock_request__pack_to_buffer
                     (const TermReleaseLockRequest   *message,
                      ProtobufCBuffer     *buffer);
TermReleaseLockRequest *
       term_release_lock_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_release_lock_request__free_unpacked
                     (TermReleaseLockRequest *message,
                      ProtobufCAllocator *allocator);
/* TermRegisterClientRequest methods */
void   term_register_client_request__init
                     (TermRegisterClientRequest         *message);
size_t term_register_client_request__get_packed_size
                     (const TermRegisterClientRequest   *message);
size_t term_register_client_request__pack
                     (const TermRegisterClientRequest   *message,
                      uint8_t             *out);
size_t term_register_client_request__pack_to_buffer
                     (const TermRegisterClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TermRegisterClientRequest *
       term_register_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_register_client_request__free_unpacked
                     (TermRegisterClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TermRegisterClientResponse methods */
void   term_register_client_response__init
                     (TermRegisterClientResponse         *message);
size_t term_register_client_response__get_packed_size
                     (const TermRegisterClientResponse   *message);
size_t term_register_client_response__pack
                     (const TermRegisterClientResponse   *message,
                      uint8_t             *out);
size_t term_register_client_response__pack_to_buffer
                     (const TermRegisterClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TermRegisterClientResponse *
       term_register_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_register_client_response__free_unpacked
                     (TermRegisterClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TermWriteStringRequest methods */
void   term_write_string_request__init
                     (TermWriteStringRequest         *message);
size_t term_write_string_request__get_packed_size
                     (const TermWriteStringRequest   *message);
size_t term_write_string_request__pack
                     (const TermWriteStringRequest   *message,
                      uint8_t             *out);
size_t term_write_string_request__pack_to_buffer
                     (const TermWriteStringRequest   *message,
                      ProtobufCBuffer     *buffer);
TermWriteStringRequest *
       term_write_string_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_write_string_request__free_unpacked
                     (TermWriteStringRequest *message,
                      ProtobufCAllocator *allocator);
/* TermWriteStringResponse methods */
void   term_write_string_response__init
                     (TermWriteStringResponse         *message);
size_t term_write_string_response__get_packed_size
                     (const TermWriteStringResponse   *message);
size_t term_write_string_response__pack
                     (const TermWriteStringResponse   *message,
                      uint8_t             *out);
size_t term_write_string_response__pack_to_buffer
                     (const TermWriteStringResponse   *message,
                      ProtobufCBuffer     *buffer);
TermWriteStringResponse *
       term_write_string_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_write_string_response__free_unpacked
                     (TermWriteStringResponse *message,
                      ProtobufCAllocator *allocator);
/* TermReadStringRequest methods */
void   term_read_string_request__init
                     (TermReadStringRequest         *message);
size_t term_read_string_request__get_packed_size
                     (const TermReadStringRequest   *message);
size_t term_read_string_request__pack
                     (const TermReadStringRequest   *message,
                      uint8_t             *out);
size_t term_read_string_request__pack_to_buffer
                     (const TermReadStringRequest   *message,
                      ProtobufCBuffer     *buffer);
TermReadStringRequest *
       term_read_string_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_read_string_request__free_unpacked
                     (TermReadStringRequest *message,
                      ProtobufCAllocator *allocator);
/* TermReadStringResponse methods */
void   term_read_string_response__init
                     (TermReadStringResponse         *message);
size_t term_read_string_response__get_packed_size
                     (const TermReadStringResponse   *message);
size_t term_read_string_response__pack
                     (const TermReadStringResponse   *message,
                      uint8_t             *out);
size_t term_read_string_response__pack_to_buffer
                     (const TermReadStringResponse   *message,
                      ProtobufCBuffer     *buffer);
TermReadStringResponse *
       term_read_string_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_read_string_response__free_unpacked
                     (TermReadStringResponse *message,
                      ProtobufCAllocator *allocator);
/* TermWriteCharRequest methods */
void   term_write_char_request__init
                     (TermWriteCharRequest         *message);
size_t term_write_char_request__get_packed_size
                     (const TermWriteCharRequest   *message);
size_t term_write_char_request__pack
                     (const TermWriteCharRequest   *message,
                      uint8_t             *out);
size_t term_write_char_request__pack_to_buffer
                     (const TermWriteCharRequest   *message,
                      ProtobufCBuffer     *buffer);
TermWriteCharRequest *
       term_write_char_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_write_char_request__free_unpacked
                     (TermWriteCharRequest *message,
                      ProtobufCAllocator *allocator);
/* TermWriteCharResponse methods */
void   term_write_char_response__init
                     (TermWriteCharResponse         *message);
size_t term_write_char_response__get_packed_size
                     (const TermWriteCharResponse   *message);
size_t term_write_char_response__pack
                     (const TermWriteCharResponse   *message,
                      uint8_t             *out);
size_t term_write_char_response__pack_to_buffer
                     (const TermWriteCharResponse   *message,
                      ProtobufCBuffer     *buffer);
TermWriteCharResponse *
       term_write_char_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_write_char_response__free_unpacked
                     (TermWriteCharResponse *message,
                      ProtobufCAllocator *allocator);
/* TermReadCharRequest methods */
void   term_read_char_request__init
                     (TermReadCharRequest         *message);
size_t term_read_char_request__get_packed_size
                     (const TermReadCharRequest   *message);
size_t term_read_char_request__pack
                     (const TermReadCharRequest   *message,
                      uint8_t             *out);
size_t term_read_char_request__pack_to_buffer
                     (const TermReadCharRequest   *message,
                      ProtobufCBuffer     *buffer);
TermReadCharRequest *
       term_read_char_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_read_char_request__free_unpacked
                     (TermReadCharRequest *message,
                      ProtobufCAllocator *allocator);
/* TermReadCharRespnose methods */
void   term_read_char_respnose__init
                     (TermReadCharRespnose         *message);
size_t term_read_char_respnose__get_packed_size
                     (const TermReadCharRespnose   *message);
size_t term_read_char_respnose__pack
                     (const TermReadCharRespnose   *message,
                      uint8_t             *out);
size_t term_read_char_respnose__pack_to_buffer
                     (const TermReadCharRespnose   *message,
                      ProtobufCBuffer     *buffer);
TermReadCharRespnose *
       term_read_char_respnose__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_read_char_respnose__free_unpacked
                     (TermReadCharRespnose *message,
                      ProtobufCAllocator *allocator);
/* TermDebugRequest methods */
void   term_debug_request__init
                     (TermDebugRequest         *message);
size_t term_debug_request__get_packed_size
                     (const TermDebugRequest   *message);
size_t term_debug_request__pack
                     (const TermDebugRequest   *message,
                      uint8_t             *out);
size_t term_debug_request__pack_to_buffer
                     (const TermDebugRequest   *message,
                      ProtobufCBuffer     *buffer);
TermDebugRequest *
       term_debug_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   term_debug_request__free_unpacked
                     (TermDebugRequest *message,
                      ProtobufCAllocator *allocator);
/* RpcRequestWrap methods */
void   rpc_request_wrap__init
                     (RpcRequestWrap         *message);
size_t rpc_request_wrap__get_packed_size
                     (const RpcRequestWrap   *message);
size_t rpc_request_wrap__pack
                     (const RpcRequestWrap   *message,
                      uint8_t             *out);
size_t rpc_request_wrap__pack_to_buffer
                     (const RpcRequestWrap   *message,
                      ProtobufCBuffer     *buffer);
RpcRequestWrap *
       rpc_request_wrap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_request_wrap__free_unpacked
                     (RpcRequestWrap *message,
                      ProtobufCAllocator *allocator);
/* RpcResponseWrap methods */
void   rpc_response_wrap__init
                     (RpcResponseWrap         *message);
size_t rpc_response_wrap__get_packed_size
                     (const RpcResponseWrap   *message);
size_t rpc_response_wrap__pack
                     (const RpcResponseWrap   *message,
                      uint8_t             *out);
size_t rpc_response_wrap__pack_to_buffer
                     (const RpcResponseWrap   *message,
                      ProtobufCBuffer     *buffer);
RpcResponseWrap *
       rpc_response_wrap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_response_wrap__free_unpacked
                     (RpcResponseWrap *message,
                      ProtobufCAllocator *allocator);
/* RpcMessage methods */
void   rpc_message__init
                     (RpcMessage         *message);
size_t rpc_message__get_packed_size
                     (const RpcMessage   *message);
size_t rpc_message__pack
                     (const RpcMessage   *message,
                      uint8_t             *out);
size_t rpc_message__pack_to_buffer
                     (const RpcMessage   *message,
                      ProtobufCBuffer     *buffer);
RpcMessage *
       rpc_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc_message__free_unpacked
                     (RpcMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*InitSendNumberRequest_Closure)
                 (const InitSendNumberRequest *message,
                  void *closure_data);
typedef void (*InitSendStringRequest_Closure)
                 (const InitSendStringRequest *message,
                  void *closure_data);
typedef void (*InitSerialPutStringRequest_Closure)
                 (const InitSerialPutStringRequest *message,
                  void *closure_data);
typedef void (*InitSerialPutcharRequest_Closure)
                 (const InitSerialPutcharRequest *message,
                  void *closure_data);
typedef void (*InitSerialGetcharResponse_Closure)
                 (const InitSerialGetcharResponse *message,
                  void *closure_data);
typedef void (*InitProcessSpawnRequest_Closure)
                 (const InitProcessSpawnRequest *message,
                  void *closure_data);
typedef void (*InitProcessSpawnResponse_Closure)
                 (const InitProcessSpawnResponse *message,
                  void *closure_data);
typedef void (*InitProcessGetNameRequest_Closure)
                 (const InitProcessGetNameRequest *message,
                  void *closure_data);
typedef void (*InitProcessGetNameResponse_Closure)
                 (const InitProcessGetNameResponse *message,
                  void *closure_data);
typedef void (*InitProcessGetAllPidsRequest_Closure)
                 (const InitProcessGetAllPidsRequest *message,
                  void *closure_data);
typedef void (*InitProcessGetAllPidsResponse_Closure)
                 (const InitProcessGetAllPidsResponse *message,
                  void *closure_data);
typedef void (*InitProcessInformDeathRequest_Closure)
                 (const InitProcessInformDeathRequest *message,
                  void *closure_data);
typedef void (*RouteRequest_Closure)
                 (const RouteRequest *message,
                  void *closure_data);
typedef void (*RouteResponse_Closure)
                 (const RouteResponse *message,
                  void *closure_data);
typedef void (*MemGetRamCapRequest_Closure)
                 (const MemGetRamCapRequest *message,
                  void *closure_data);
typedef void (*MemGetRamCapResponse_Closure)
                 (const MemGetRamCapResponse *message,
                  void *closure_data);
typedef void (*ServiceConnectRequest_Closure)
                 (const ServiceConnectRequest *message,
                  void *closure_data);
typedef void (*ServiceBytesRequest_Closure)
                 (const ServiceBytesRequest *message,
                  void *closure_data);
typedef void (*ServiceBytesResponse_Closure)
                 (const ServiceBytesResponse *message,
                  void *closure_data);
typedef void (*TestIncrementRequest_Closure)
                 (const TestIncrementRequest *message,
                  void *closure_data);
typedef void (*TestIncrementResponse_Closure)
                 (const TestIncrementResponse *message,
                  void *closure_data);
typedef void (*TestCapIncrementRequest_Closure)
                 (const TestCapIncrementRequest *message,
                  void *closure_data);
typedef void (*TestCapIncrementResponse_Closure)
                 (const TestCapIncrementResponse *message,
                  void *closure_data);
typedef void (*ServiceInfo_Closure)
                 (const ServiceInfo *message,
                  void *closure_data);
typedef void (*NsLookupRequest_Closure)
                 (const NsLookupRequest *message,
                  void *closure_data);
typedef void (*NsLookupResponse_Closure)
                 (const NsLookupResponse *message,
                  void *closure_data);
typedef void (*NsRegisterRequest_Closure)
                 (const NsRegisterRequest *message,
                  void *closure_data);
typedef void (*NsEnumerateRequest_Closure)
                 (const NsEnumerateRequest *message,
                  void *closure_data);
typedef void (*NsDeregisterRequest_Closure)
                 (const NsDeregisterRequest *message,
                  void *closure_data);
typedef void (*NsEnumerateResponse_Closure)
                 (const NsEnumerateResponse *message,
                  void *closure_data);
typedef void (*CreateUdpEndpointRequest_Closure)
                 (const CreateUdpEndpointRequest *message,
                  void *closure_data);
typedef void (*CreateTcpConnectionRequest_Closure)
                 (const CreateTcpConnectionRequest *message,
                  void *closure_data);
typedef void (*ArpRequest_Closure)
                 (const ArpRequest *message,
                  void *closure_data);
typedef void (*ArpTableResponse_Closure)
                 (const ArpTableResponse *message,
                  void *closure_data);
typedef void (*CreateTcpServerRequest_Closure)
                 (const CreateTcpServerRequest *message,
                  void *closure_data);
typedef void (*ConnectTcpClientRequest_Closure)
                 (const ConnectTcpClientRequest *message,
                  void *closure_data);
typedef void (*FSOpenRequest_Closure)
                 (const FSOpenRequest *message,
                  void *closure_data);
typedef void (*FSOpenResponse_Closure)
                 (const FSOpenResponse *message,
                  void *closure_data);
typedef void (*FSCreateRequest_Closure)
                 (const FSCreateRequest *message,
                  void *closure_data);
typedef void (*FSCreateResponse_Closure)
                 (const FSCreateResponse *message,
                  void *closure_data);
typedef void (*FSDeleteRequest_Closure)
                 (const FSDeleteRequest *message,
                  void *closure_data);
typedef void (*FSCloseRequest_Closure)
                 (const FSCloseRequest *message,
                  void *closure_data);
typedef void (*FSReadRequest_Closure)
                 (const FSReadRequest *message,
                  void *closure_data);
typedef void (*FSReadResponse_Closure)
                 (const FSReadResponse *message,
                  void *closure_data);
typedef void (*FSReadFileToFrameRequest_Closure)
                 (const FSReadFileToFrameRequest *message,
                  void *closure_data);
typedef void (*FSReadFileToFrameResponse_Closure)
                 (const FSReadFileToFrameResponse *message,
                  void *closure_data);
typedef void (*FSWriteRequest_Closure)
                 (const FSWriteRequest *message,
                  void *closure_data);
typedef void (*FSWriteResponse_Closure)
                 (const FSWriteResponse *message,
                  void *closure_data);
typedef void (*FSTruncRequest_Closure)
                 (const FSTruncRequest *message,
                  void *closure_data);
typedef void (*FSReadNextDirRequest_Closure)
                 (const FSReadNextDirRequest *message,
                  void *closure_data);
typedef void (*FSReadNextDirResponse_Closure)
                 (const FSReadNextDirResponse *message,
                  void *closure_data);
typedef void (*TermAcquireLockRequest_Closure)
                 (const TermAcquireLockRequest *message,
                  void *closure_data);
typedef void (*TermAcquireLockResponse_Closure)
                 (const TermAcquireLockResponse *message,
                  void *closure_data);
typedef void (*TermReleaseLockRequest_Closure)
                 (const TermReleaseLockRequest *message,
                  void *closure_data);
typedef void (*TermRegisterClientRequest_Closure)
                 (const TermRegisterClientRequest *message,
                  void *closure_data);
typedef void (*TermRegisterClientResponse_Closure)
                 (const TermRegisterClientResponse *message,
                  void *closure_data);
typedef void (*TermWriteStringRequest_Closure)
                 (const TermWriteStringRequest *message,
                  void *closure_data);
typedef void (*TermWriteStringResponse_Closure)
                 (const TermWriteStringResponse *message,
                  void *closure_data);
typedef void (*TermReadStringRequest_Closure)
                 (const TermReadStringRequest *message,
                  void *closure_data);
typedef void (*TermReadStringResponse_Closure)
                 (const TermReadStringResponse *message,
                  void *closure_data);
typedef void (*TermWriteCharRequest_Closure)
                 (const TermWriteCharRequest *message,
                  void *closure_data);
typedef void (*TermWriteCharResponse_Closure)
                 (const TermWriteCharResponse *message,
                  void *closure_data);
typedef void (*TermReadCharRequest_Closure)
                 (const TermReadCharRequest *message,
                  void *closure_data);
typedef void (*TermReadCharRespnose_Closure)
                 (const TermReadCharRespnose *message,
                  void *closure_data);
typedef void (*TermDebugRequest_Closure)
                 (const TermDebugRequest *message,
                  void *closure_data);
typedef void (*RpcRequestWrap_Closure)
                 (const RpcRequestWrap *message,
                  void *closure_data);
typedef void (*RpcResponseWrap_Closure)
                 (const RpcResponseWrap *message,
                  void *closure_data);
typedef void (*RpcMessage_Closure)
                 (const RpcMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    rpc_method__descriptor;
extern const ProtobufCMessageDescriptor init_send_number_request__descriptor;
extern const ProtobufCMessageDescriptor init_send_string_request__descriptor;
extern const ProtobufCMessageDescriptor init_serial_put_string_request__descriptor;
extern const ProtobufCMessageDescriptor init_serial_putchar_request__descriptor;
extern const ProtobufCMessageDescriptor init_serial_getchar_response__descriptor;
extern const ProtobufCMessageDescriptor init_process_spawn_request__descriptor;
extern const ProtobufCMessageDescriptor init_process_spawn_response__descriptor;
extern const ProtobufCMessageDescriptor init_process_get_name_request__descriptor;
extern const ProtobufCMessageDescriptor init_process_get_name_response__descriptor;
extern const ProtobufCMessageDescriptor init_process_get_all_pids_request__descriptor;
extern const ProtobufCMessageDescriptor init_process_get_all_pids_response__descriptor;
extern const ProtobufCMessageDescriptor init_process_inform_death_request__descriptor;
extern const ProtobufCMessageDescriptor route_request__descriptor;
extern const ProtobufCMessageDescriptor route_response__descriptor;
extern const ProtobufCMessageDescriptor mem_get_ram_cap_request__descriptor;
extern const ProtobufCMessageDescriptor mem_get_ram_cap_response__descriptor;
extern const ProtobufCMessageDescriptor service_connect_request__descriptor;
extern const ProtobufCEnumDescriptor    service_connect_request__type__descriptor;
extern const ProtobufCMessageDescriptor service_bytes_request__descriptor;
extern const ProtobufCMessageDescriptor service_bytes_response__descriptor;
extern const ProtobufCMessageDescriptor test_increment_request__descriptor;
extern const ProtobufCMessageDescriptor test_increment_response__descriptor;
extern const ProtobufCMessageDescriptor test_cap_increment_request__descriptor;
extern const ProtobufCMessageDescriptor test_cap_increment_response__descriptor;
extern const ProtobufCMessageDescriptor service_info__descriptor;
extern const ProtobufCMessageDescriptor ns_lookup_request__descriptor;
extern const ProtobufCMessageDescriptor ns_lookup_response__descriptor;
extern const ProtobufCMessageDescriptor ns_register_request__descriptor;
extern const ProtobufCMessageDescriptor ns_enumerate_request__descriptor;
extern const ProtobufCMessageDescriptor ns_deregister_request__descriptor;
extern const ProtobufCMessageDescriptor ns_enumerate_response__descriptor;
extern const ProtobufCMessageDescriptor create_udp_endpoint_request__descriptor;
extern const ProtobufCMessageDescriptor create_tcp_connection_request__descriptor;
extern const ProtobufCMessageDescriptor arp_request__descriptor;
extern const ProtobufCMessageDescriptor arp_table_response__descriptor;
extern const ProtobufCMessageDescriptor create_tcp_server_request__descriptor;
extern const ProtobufCMessageDescriptor connect_tcp_client_request__descriptor;
extern const ProtobufCMessageDescriptor fsopen_request__descriptor;
extern const ProtobufCMessageDescriptor fsopen_response__descriptor;
extern const ProtobufCMessageDescriptor fscreate_request__descriptor;
extern const ProtobufCMessageDescriptor fscreate_response__descriptor;
extern const ProtobufCMessageDescriptor fsdelete_request__descriptor;
extern const ProtobufCMessageDescriptor fsclose_request__descriptor;
extern const ProtobufCMessageDescriptor fsread_request__descriptor;
extern const ProtobufCMessageDescriptor fsread_response__descriptor;
extern const ProtobufCMessageDescriptor fsread_file_to_frame_request__descriptor;
extern const ProtobufCMessageDescriptor fsread_file_to_frame_response__descriptor;
extern const ProtobufCMessageDescriptor fswrite_request__descriptor;
extern const ProtobufCMessageDescriptor fswrite_response__descriptor;
extern const ProtobufCMessageDescriptor fstrunc_request__descriptor;
extern const ProtobufCMessageDescriptor fsread_next_dir_request__descriptor;
extern const ProtobufCMessageDescriptor fsread_next_dir_response__descriptor;
extern const ProtobufCMessageDescriptor term_acquire_lock_request__descriptor;
extern const ProtobufCMessageDescriptor term_acquire_lock_response__descriptor;
extern const ProtobufCMessageDescriptor term_release_lock_request__descriptor;
extern const ProtobufCMessageDescriptor term_register_client_request__descriptor;
extern const ProtobufCMessageDescriptor term_register_client_response__descriptor;
extern const ProtobufCMessageDescriptor term_write_string_request__descriptor;
extern const ProtobufCMessageDescriptor term_write_string_response__descriptor;
extern const ProtobufCMessageDescriptor term_read_string_request__descriptor;
extern const ProtobufCMessageDescriptor term_read_string_response__descriptor;
extern const ProtobufCMessageDescriptor term_write_char_request__descriptor;
extern const ProtobufCMessageDescriptor term_write_char_response__descriptor;
extern const ProtobufCMessageDescriptor term_read_char_request__descriptor;
extern const ProtobufCMessageDescriptor term_read_char_respnose__descriptor;
extern const ProtobufCMessageDescriptor term_debug_request__descriptor;
extern const ProtobufCMessageDescriptor rpc_request_wrap__descriptor;
extern const ProtobufCMessageDescriptor rpc_response_wrap__descriptor;
extern const ProtobufCMessageDescriptor rpc_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rpcs_2eproto__INCLUDED */
